{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport Input from \"./Input/Input\";\nimport classes from './Contact.module.css';\n\nclass Contact extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      name: \"\",\n      message: \"\",\n      email: \"\"\n    });\n  }\n\n  // @ts-ignore\n  textChangeHandler(type, text) {\n    const oldState = _objectSpread({}, this.state); // @ts-ignore\n\n\n    oldState[type] = text;\n    this.setState(oldState);\n  }\n\n  render() {\n    // Change div to AUX HOC?\n    // const allInputs = Object.keys(this.state).map((key: String, index: number) => {\n    //     return <Input key={index} name={key} message={this.state[name]} textChange={this.textChangeHandler}/>\n    // });\n    return __jsx(\"div\", {\n      className: classes.Contact\n    }, __jsx(\"p\", null, \"Interested in working on a project together? Feel free to send an email here or at hello@hiimchrislim.co\"), __jsx(\"p\", null, \"Responses take 1-2 days!\"), __jsx(Input, {\n      name: \"name\"\n    }));\n  }\n\n}\n\nexport default Contact; // Contact.propType = {\n//     name: String,\n//     message: String,\n//     email: String,\n//\n// }","map":null,"metadata":{},"sourceType":"module"}